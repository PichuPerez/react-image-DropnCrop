{"version":3,"sources":["logo.svg","ImageDropAndCrop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DropContainer","styled","div","DropCopy","p","ThumbContainer","Controler","Input","input","PreviewImg","img","ImageDropAndCrop","props","useState","file","setFile","scale","setScale","preview","setPreview","showEditor","setShowEditor","editor","useRef","useDropzone","accept","onDrop","acceptedFiles","droppedFile","map","Object","assign","URL","createObjectURL","getRootProps","getInputProps","useEffect","revokeObjectURL","length","className","key","name","ref","parseFloat","width","height","rotate","border","image","type","onChange","e","target","value","min","max","step","defaultValue","onClick","data","current","getImageScaledToCanvas","toDataURL","src","getImage","toBlob","blob","setImage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,2/BCK3C,IAAMC,EAAgBC,IAAOC,IAAV,KAQbC,EAAWF,IAAOG,EAAV,KAKRC,EAAiBJ,IAAOC,IAAV,KAQdI,EAAYL,IAAOC,IAAV,KAITK,EAAQN,IAAOO,MAAV,KAILC,EAAaR,IAAOS,IAAV,KA2GDC,EApGU,SAACC,GAAW,IAAD,EACVC,mBAAS,IADC,mBAC3BC,EAD2B,KACrBC,EADqB,OAERF,mBAAS,GAFD,mBAE3BG,EAF2B,KAEpBC,EAFoB,OAGJJ,mBAAS,GAHL,mBAG3BK,EAH2B,KAGlBC,EAHkB,OAIEN,oBAAS,GAJX,mBAI3BO,EAJ2B,KAIfC,EAJe,KAK5BC,EAASC,iBAAO,MALY,EAOMC,YAAY,CAClDC,OAAQ,UACRC,OAAQ,SAACC,GACP,IAAMC,EAAcD,EAAcE,KAAI,SAACf,GAAD,OACpCgB,OAAOC,OAAOjB,EAAM,CAClBI,QAASc,IAAIC,gBAAgBnB,QAGjCC,EAAQa,EAAY,IACpBP,GAAc,MATVa,EAP0B,EAO1BA,aAAcC,EAPY,EAOZA,cAuBtBC,qBACE,kBAAM,WACJJ,IAAIK,gBAAgBvB,EAAKI,YAE3B,CAACJ,IAUH,OACE,6BACGA,GAAwB,IAAhBA,EAAKwB,QACZ,kBAACtC,EAAkBkC,EAAa,CAAEK,UAAW,aAC3C,0BAAWJ,KACX,kBAAChC,EAAD,KACG,IADH,6DAMHiB,GACC,kBAACf,EAAD,KACE,yBAAKmC,IAAK1B,EAAK2B,MACb,kBAAC,IAAD,CACEC,IAAKpB,EACLN,MAAO2B,WAAW3B,GAClB4B,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,OAAQ,GACRC,MAAOlC,EAAKI,QACZqB,UAAU,kBAEZ,6BACA,kBAACjC,EAAD,aAEE,kBAACC,EAAD,CACEkC,KAAK,QACLQ,KAAK,QACLC,SAtDM,SAACC,GACnB,IAAMnC,EAAQ2B,WAAWQ,EAAEC,OAAOC,OAClCpC,EAASD,IAqDGsC,IAAI,IACJC,IAAI,IACJC,KAAK,OACLC,aAAa,MAEf,4BAAQR,KAAK,SAASS,QAvDf,SAACC,GAClB,IAAMjD,EAAMY,EAAOsC,QAAQC,yBAAyBC,YACpD3C,EAAWT,KAqDD,YAIF,6BACa,IAAZQ,EAAgB,kBAACT,EAAD,CAAYsD,IAAK7C,IAAc,GACnC,IAAZA,EACC,4BAAQ+B,KAAK,SAASS,QAlDd,WACHpC,EAAOsC,QAAQI,WACvBC,QAAO,SAACC,GACbtD,EAAMuD,SAASD,MAEjB7C,GAAc,KA6CJ,gBAIA,OCrHC+C,MAVf,WACE,OACE,yBAAK7B,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ed202d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState, useRef } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport ReactAvatarEditor from 'react-avatar-editor'\nimport styled from 'styled-components'\n\nconst DropContainer = styled.div`\n  border: 1px dotted black;\n  margin-bottom: 15px;\n  width: 400px;\n  text-align: center;\n  cursor: pointer;\n`\n\nconst DropCopy = styled.p`\n  padding-left: 15px;\n  padding-right: 15px;\n`\n\nconst ThumbContainer = styled.div`\n  display: inline-flex;\n  marginbottom: 8px;\n  marginright: 8px;\n  padding: 4;\n  boxsizing: border-box;\n`\n\nconst Controler = styled.div`\n  margin-top: 20px;\n  text-align: center;\n`\nconst Input = styled.input`\n  margin-left: 15px;\n  margin-right: 20px;\n`\nconst PreviewImg = styled.img`\n  display: 'block';\n  width: 'auto';\n  height: '100%';\n  margin-bottom: 15px;\n`\n\nconst ImageDropAndCrop = (props) => {\n  const [file, setFile] = useState([])\n  const [scale, setScale] = useState(1)\n  const [preview, setPreview] = useState(1)\n  const [showEditor, setShowEditor] = useState(false)\n  const editor = useRef(null)\n\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    onDrop: (acceptedFiles) => {\n      const droppedFile = acceptedFiles.map((file) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      )\n      setFile(droppedFile[0])\n      setShowEditor(true)\n    },\n  })\n\n  const handleScale = (e) => {\n    const scale = parseFloat(e.target.value)\n    setScale(scale)\n  }\n\n  const handleSave = (data) => {\n    const img = editor.current.getImageScaledToCanvas().toDataURL()\n    setPreview(img)\n  }\n\n  useEffect(\n    () => () => {\n      URL.revokeObjectURL(file.preview)\n    },\n    [file]\n  )\n\n  const uploadImage = () => {\n    const canvas = editor.current.getImage()\n    canvas.toBlob((blob) => {\n      props.setImage(blob)\n    })\n    setShowEditor(false)\n  }\n  return (\n    <div>\n      {file && file.length === 0 && (\n        <DropContainer {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <DropCopy>\n            {' '}\n            Ô∏èDrag 'n' drop files here, or click to select files\n          </DropCopy>\n        </DropContainer>\n      )}\n      {showEditor && (\n        <ThumbContainer>\n          <div key={file.name}>\n            <ReactAvatarEditor\n              ref={editor}\n              scale={parseFloat(scale)}\n              width={785}\n              height={455}\n              rotate={0}\n              border={20}\n              image={file.preview}\n              className=\"editor-canvas\"\n            />\n            <br />\n            <Controler>\n              Zoom:\n              <Input\n                name=\"scale\"\n                type=\"range\"\n                onChange={handleScale}\n                min=\"1\"\n                max=\"3\"\n                step=\"0.01\"\n                defaultValue=\"1\"\n              />\n              <button type=\"button\" onClick={handleSave}>\n                Preview\n              </button>\n            </Controler>\n            <br />\n            {preview !== 1 ? <PreviewImg src={preview} /> : ''}\n            {preview !== 1 ? (\n              <button type=\"button\" onClick={uploadImage}>\n                Upload Image\n              </button>\n            ) : (\n              ''\n            )}\n          </div>\n        </ThumbContainer>\n      )}\n    </div>\n  )\n}\n\nexport default ImageDropAndCrop\n","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport ImageDropAndCrop from './ImageDropAndCrop'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ImageDropAndCrop />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}